var releAddon = require('../AddonRele/build/Release/addon');
var fileWriter = require('./fileWriter');

//---------- Default ---------------

var defaultPort = 17; //pinout GPIO(17=pin11 su pcb)
var outputFilenameDisplayLight = "/Termostato/store/displayLight.js";
var outputFilenameCustomText = "/Termostato/store/customText.js";


//---------- Relè Setter -----------

function setRele(bit)
{
	var p = releAddon.setRele(defaultPort, bit); // value=0o1 
	console.log("lettura da addonRele -> " , p);
}//setRele

//---------- classes ---------------

function Vector(){};
	Vector.prototype.name = "";
	Vector.prototype.param1 = false;	
	Vector.prototype.param2 = false;
	Vector.prototype.param3 = false;
	Vector.prototype.param4 = false;
	
	Vector.prototype.setName = function(name){
		this.name = name;
	};
	Vector.prototype.setParam1 = function(param1){
		throw "param1 set is not defined";
	};
	Vector.prototype.setParam2 = function(param2){
		throw "param2 set is not defined";
	};
	Vector.prototype.setParam3 = function(param3){
		throw "param3 set is not defined";
	};
	Vector.prototype.setParam4 = function(param4){
		throw "param4 set is not defined";
	};
	
function Rele1(){};
	Rele1.prototype = new Vector();
	Rele1.prototype.__proto__ = Vector.prototype;
	Rele1.prototype.setName("Rele1");
	Rele1.prototype.setOn = function(){
		this.param1 = true;
		setRele(1);
	};
	Rele1.prototype.setOff = function(){
		this.param1 = false;
		setRele(0);
	};
	Rele1.prototype.isOn = function(){
		return this.param1;
	};
	
function Rele2(){};
	Rele2.prototype = new Rele1(); //eredito da Rele1 (inutile rifare ciò che ho già fatto)
	Rele2.prototype.__proto__ = Rele1.prototype; //riprendo tutti i prototipe ereditati
	Rele2.prototype.setName("Rele2");

function CustomText() { };
CustomText.prototype.setObject = function (value) {
        fileWriter.write(outputFilenameCustomText, value);
    };
    CustomText.prototype.getObject = function () {
        var value = fileWriter.read(outputFilenameCustomText);
        return value;
    };

function Season(){};
	Season.prototype = new Vector();
	Season.prototype.__proto__ = Vector.prototype;
	Season.prototype.setSeason = function(param){
		if(param.season == "Summer")
		{
			this.param1 = false;
			return { season: "Summer" };
		}
		else
		{
			this.param1 = true;
			return { season: "Winter" } 
		}
	};
	Season.prototype.getParam = function(){
		return this.param1 == true ? { season: "Winter" } : { season: "Summer" } ;
	};

function DisplayLight(){};
    DisplayLight.prototype = new Vector();
    DisplayLight.prototype.__proto__ = Vector.prototype;
    DisplayLight.prototype.setParam = function (param) {
        fileWriter.write(outputFilenameDisplayLight, param);
	    if(param.alwaysOn == 'true')
	    {
		    this.param1 = true;
		    this.param2 = false;
		    this.param3 = false;
		    return { "alwaysOn": 'true' };
	    }
	    else if (param.tempUmid == 'true')
	    {
		    this.param1 = false;
		    this.param2 = true;
		    this.param3 = false;
		    return { "tempUmid": 'true' };
	    }
	    else if (param.customText == 'true')
	    {
		    this.param1 = false;
		    this.param2 = false;
		    this.param3 = true;
		    return { "customText": 'true' };
	    }
	    return { "alwaysOn": 'true' };
    };
    DisplayLight.prototype.getParam = function(){
	    var value = undefined;
	    value = fileWriter.read( outputFilenameDisplayLight );
	    return value;
    };

function HeatingSystem(){};
	HeatingSystem.prototype = new Vector();
	HeatingSystem.prototype.__proto__ = Vector.prototype;
	HeatingSystem.prototype.setOn = function () {
	    this.param1 = true;
	    setRele(1);
	    return { param1: "heatingSystemOn" };
	};
	HeatingSystem.prototype.setOff = function () {
	    this.param1 = false;
	    setRele(0);
	    return { param1: "heatingSystemOff" };
	};
	HeatingSystem.prototype.toggleParam = function () {
		if(this.param1 == true)
		{
			this.param1 = false;
			setRele(0);
			return { param1:"heatingSystemOff" };
		}
		else
		{
			this.param1 = true;
			setRele(1);
			return { param1:"heatingSystemOn" };
		}
	};
	HeatingSystem.prototype.getParam = function(){
		if(this.param1 == true) return { param1:"heatingSystemOn" };
		if(this.param1 == false) return { param1:"heatingSystemOff" };
	};
	
//---------- globals ---------------

//---------- privates ---------------

//---------- methods ---------------

//---------- exports ---------------

exports.Rele1 = new Rele1();
exports.Rele2 = new Rele2();
exports.Season = new Season();
exports.DisplayLight = new DisplayLight();
exports.HeatingSystem = new HeatingSystem();
exports.CustomText = new CustomText();