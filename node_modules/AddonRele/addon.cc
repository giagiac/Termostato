// Access from ARM Running Linux

#define BCM2708_PERI_BASE        0x20000000
#define GPIO_BASE                (BCM2708_PERI_BASE + 0x200000) /* GPIO controller */

#include <stdio.h>
#include <string>
#include <stdlib.h>
#include <dirent.h>
#include <fcntl.h>
#include <assert.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <bcm2835.h>
#include <unistd.h>
#include <math.h>

#define BUILDING_NODE_EXTENSION
#include <node.h>

using namespace v8;
using namespace std;

int SetRele(int value, int pin);

int SetRele(int value, int pin) {

	bcm2835_init();
	// Set GPIO pin to output
	bcm2835_gpio_fsel(pin, BCM2835_GPIO_FSEL_OUTP);

	if(value == 0) {
		bcm2835_gpio_write(pin, LOW);
		return 0;
	}
	else {
		bcm2835_gpio_write(pin, HIGH);
		return 1;
	}
	return 2; //error
}

Handle<Value> setRele(const Arguments& args) {
	HandleScope scope;

	if (args.Length() < 2) {
		ThrowException(Exception::TypeError(String::New("Wrong number of arguments")));
		return scope.Close(Undefined());
	}

	if (!args[0]->IsNumber() || !args[1]->IsNumber()) {
		ThrowException(Exception::TypeError(String::New("Wrong arguments")));
		return scope.Close(Undefined());
	}

	int pin = args[0]->ToInteger()->Value();
	int value = args[1]->ToInteger()->Value(); // 1 or 0

	Local<Object> obj = Object::New();
	//temp = ceilf(temp * 100) / 100;
	//umid = ceilf(umid * 100) / 100;
	int output = SetRele(value, pin);
	obj->Set(String::NewSymbol("value"), (Number::New(output))->ToString());
	return scope.Close(obj);
}

void Init(Handle<Object> exports, Handle<Object> module) {
	exports->Set(String::NewSymbol("setRele"), FunctionTemplate::New(setRele)->GetFunction());
}

NODE_MODULE(addon, Init);
